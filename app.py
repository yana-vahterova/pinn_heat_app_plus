# ==== DEVICE SELECTION BLOCK BEGIN ====

import json
import math
import streamlit as st
import torch

# ==== DEVICE SELECTION BLOCK BEGIN ====
def _available_devices():
    opts = ["cpu"]
    try:
        if torch.cuda.is_available():
            opts.append("cuda")
    except Exception:
        pass
    try:
        if getattr(torch.backends, "mps", None) and torch.backends.mps.is_available():
            opts.append("mps")
    except Exception:
        pass
    return opts

if "device" not in st.session_state:
    st.session_state["device"] = "cuda" if torch.cuda.is_available() else "cpu"

with st.sidebar.expander("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è PINN)", expanded=True):
    dev_opts = _available_devices()
    default_idx = dev_opts.index(st.session_state.get("device", dev_opts[0])) if st.session_state.get("device", dev_opts[0]) in dev_opts else 0
    choice = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", dev_opts, index=default_idx, key="device")
    if choice == "cuda" and torch.cuda.is_available():
        try:
            st.caption(f"GPU: {torch.cuda.get_device_name(0)}")
        except Exception:
            st.caption("GPU: CUDA")
    elif choice == "mps":
        st.caption("Apple Metal (MPS)")
    else:
        st.caption("CPU")

_selected_device = st.session_state["device"]
if _selected_device == "cuda" and not torch.cuda.is_available():
    st.warning("CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ CPU.")
    _selected_device = "cpu"
if _selected_device == "mps":
    try:
        if not (getattr(torch.backends, "mps", None) and torch.backends.mps.is_available()):
            st.warning("MPS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ CPU.")
            _selected_device = "cpu"
    except Exception:
        st.warning("MPS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ CPU.")
        _selected_device = "cpu"
# ==== DEVICE SELECTION BLOCK END ====

import torch
import pandas as pd
import plotly.graph_objects as go

from src.utils import get_device, make_callable
from src.pinn_model import PINNModel, TransformedPINN, FlexibleTransformedPINN
from src.train import train_PINN
from src.presets import PRESETS
from src.config_io import make_export_dict, apply_config_to_state, build_train_config
from src.numerics import solve_numeric
from src.help_tab import render_help

st.set_page_config(page_title="PINN Heat Conduction", layout="wide")
st.title("üî¨ –†–ï–®–ï–ù–ò–ï –£–†–ê–í–ù–ï–ù–ò–ô –ö–õ–ê–°–°–ò–ß–ï–°–ö–û–ô –ò –û–ë–û–ë–©–ï–ù–ù–û–ô –ú–û–î–ï–õ–ï–ô –¢–ï–ü–õ–û–ü–†–û–í–û–î–ù–û–°–¢–ò –° –ü–û–ú–û–©–¨–Æ PINN (PyTorch + Streamlit)")


def _is_zero_expr(s: str) -> bool:
    if s is None: return True
    s = str(s).strip().lower()
    return s in ("", "0", "0.0", "0.", "sin(0)", "cos(pi/2)")  # quick conservative check

def ss_set_default(key, val):
    if key not in st.session_state:
        st.session_state[key] = val

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ss_defaults = {
    "model_name": "Fourier (Classical)",
    "kappa": 0.01, "tau_R": 0.0, "kappa_tilde": 0.5,
    "x_min": 0.0, "x_max": 1.0, "t_min": 0.0, "t_max": 1.0,
    "epochs": 2000, "n_f": 5000, "n_b": 200, "n_i": 200, "lr": 1e-3,
    "hidden_layers": 4, "hidden_units": 100,
    "left_bc_type": "Dirichlet", "right_bc_type": "Dirichlet",
    "ic_expr": "sin(pi*x)", "ict_expr": "0",
    "left_bc_expr": "0", "right_bc_expr": "0",
    "q_expr": "0",
    # –í–µ—Å–∞ –ª–æ—Å—Å–∞ –∏ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
    "w_pde": 1.0, "w_ic": 1.0, "w_bc": 1.0,
    "save_ckpt": True, "ckpt_dir": "checkpoints", "ckpt_mode": "best", "ckpt_every": 500,
    # –§–ª–∞–≥ –∏ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    "has_model": False, "use_output_transform_zero_only": False
}
for k, v in ss_defaults.items():
    ss_set_default(k, v)

# --- –°–∞–π–¥–±–∞—Ä: –ø—Ä–µ—Å–µ—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥–∏ ---
with st.sidebar:
    st.header("–ü—Ä–µ—Å–µ—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥–∏")
    
    st.markdown("---")
    st.checkbox("Hard‚Äëenforce zero IC/BC when they are zero", key="use_output_transform_zero_only",
                help="–ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ/–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é, –∂—ë—Å—Ç–∫–æ –æ–±–Ω—É–ª—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ output transform; –∏–Ω–∞—á–µ —É—Å–ª–æ–≤–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å.")
    preset_name = st.selectbox("–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", ["", *PRESETS.keys()])
    colp1, colp2 = st.columns(2)
    if colp1.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –≤ —Ñ–æ—Ä–º—É", use_container_width=True):
        if preset_name and preset_name in PRESETS:
            apply_config_to_state(st.session_state, PRESETS[preset_name])
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–µ—Å–µ—Ç: {preset_name}")
            st.rerun()
    if colp2.button("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É", use_container_width=True):
        for k, v in ss_defaults.items():
            st.session_state[k] = v
        st.rerun()

    st.markdown("‚Äî **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥**")
    export = make_export_dict(st.session_state)
    st.download_button(
        "üíæ –°–∫–∞—á–∞—Ç—å JSON",
        data=json.dumps(export, ensure_ascii=False, indent=2),
        file_name="pinn_config.json",
        mime="application/json",
        use_container_width=True,
    )

    st.markdown("‚Äî **–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥**")
    up = st.file_uploader("JSON-—Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞", type=["json"], label_visibility="collapsed")
    if up is not None:
        try:
            cfg = json.load(up)
            apply_config_to_state(st.session_state, cfg)
            st.success("–ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω")
            st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# --- –°–∞–π–¥–±–∞—Ä: –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ ---
with st.sidebar:
    st.header("–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏")
    model_list = ["Fourier (Classical)", "Maxwell‚ÄìCattaneo", "Green‚ÄìNaghdi II", "Green‚ÄìNaghdi III"]
    st.session_state["model_name"] = st.selectbox(
        "–ú–æ–¥–µ–ª—å —Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏",
        model_list,
        index=model_list.index(st.session_state["model_name"])
    )

    st.markdown("**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã**")
    _model = st.session_state["model_name"]
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –æ–±–Ω—É–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ
    if _model == "Fourier (Classical)":
        st.session_state["kappa"] = st.number_input("kappa (Œ∫)", value=float(st.session_state["kappa"]), format="%.6f")
        st.session_state["tau_R"] = 0.0
        st.session_state["kappa_tilde"] = 0.0
        st.caption("–î–ª—è –º–æ–¥–µ–ª–∏ –§—É—Ä—å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã œÑ_R –∏ ~Œ∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ 0.")
    elif _model == "Maxwell‚ÄìCattaneo":
        st.session_state["kappa"] = st.number_input("kappa (Œ∫)", value=float(st.session_state["kappa"]), format="%.6f")
        st.session_state["tau_R"] = st.number_input("tau_R (œÑ_R)", value=float(st.session_state["tau_R"]), format="%.6f")
        st.session_state["kappa_tilde"] = 0.0
        st.caption("–î–ª—è –ö–∞—Ç—Ç–∞–Ω–µ–æ –ø–∞—Ä–∞–º–µ—Ç—Ä ~Œ∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
    elif _model == "Green‚ÄìNaghdi II":
        st.session_state["kappa"] = 0.0
        st.session_state["tau_R"] = 0.0
        st.session_state["kappa_tilde"] = st.number_input("kappa_tilde (~Œ∫)", value=float(st.session_state["kappa_tilde"]), format="%.6f")
        st.caption("–î–ª—è GN-II –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Œ∫ –∏ œÑ_R –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ 0.")
    elif _model == "Green‚ÄìNaghdi III":
        st.session_state["kappa"] = st.number_input("kappa (Œ∫)", value=float(st.session_state["kappa"]), format="%.6f")
        st.session_state["tau_R"] = 0.0
        st.session_state["kappa_tilde"] = st.number_input("kappa_tilde (~Œ∫)", value=float(st.session_state["kappa_tilde"]), format="%.6f")
        st.caption("–î–ª—è GN-III –ø–∞—Ä–∞–º–µ—Ç—Ä œÑ_R –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")

    st.markdown("**–û–±–ª–∞—Å—Ç—å**")
    st.session_state["x_min"] = st.number_input("x_min", value=float(st.session_state["x_min"]), format="%.3f")
    st.session_state["x_max"] = st.number_input("x_max", value=float(st.session_state["x_max"]), format="%.3f")
    st.session_state["t_min"] = st.number_input("t_min", value=float(st.session_state["t_min"]), format="%.3f")
    st.session_state["t_max"] = st.number_input("t_max", value=float(st.session_state["t_max"]), format="%.3f")

    st.markdown("**PINN**")
    st.session_state["epochs"] = st.number_input("epochs", value=int(st.session_state["epochs"]), step=100)
    st.session_state["n_f"] = st.number_input("N_interior (–∫–æ–ª–ª–æ–∫–∞—Ü.)", value=int(st.session_state["n_f"]), step=500)
    st.session_state["n_b"] = st.number_input("N_boundary (–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É)", value=int(st.session_state["n_b"]), step=50)
    st.session_state["n_i"] = st.number_input("N_initial", value=int(st.session_state["n_i"]), step=50)
    st.session_state["lr"] = st.number_input("learning rate", value=float(st.session_state["lr"]), format="%.5f")

    st.markdown("**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏**")
    st.session_state["hidden_layers"] = st.number_input("hidden layers", value=int(st.session_state["hidden_layers"]))
    st.session_state["hidden_units"] = st.number_input("hidden units", value=int(st.session_state["hidden_units"]))

    st.divider()
    st.markdown("**–í–µ—Å–∞ –ª–æ—Å—Å–∞**")
    st.session_state["w_pde"] = st.number_input("w_pde (PDE)", value=float(st.session_state["w_pde"]), format="%.3f")
    st.session_state["w_ic"]  = st.number_input("w_ic (IC)",  value=float(st.session_state["w_ic"]),  format="%.3f")
    st.session_state["w_bc"]  = st.number_input("w_bc (BC)",  value=float(st.session_state["w_bc"]),  format="%.3f")

    st.markdown("**–ß–µ–∫–ø–æ–∏–Ω—Ç—ã**")
    st.session_state["save_ckpt"] = st.checkbox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç—ã", value=bool(st.session_state["save_ckpt"]))
    if st.session_state["save_ckpt"]:
        st.session_state["ckpt_dir"] = st.text_input("–ü–∞–ø–∫–∞ –¥–ª—è —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤", value=str(st.session_state["ckpt_dir"]))
        st.session_state["ckpt_mode"] = st.radio("–†–µ–∂–∏–º", ["best", "periodic"], index=["best","periodic"].index(st.session_state["ckpt_mode"]))
        if st.session_state["ckpt_mode"] == "periodic":
            st.session_state["ckpt_every"] = st.number_input("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ N —ç–ø–æ—Ö", min_value=1, value=int(st.session_state["ckpt_every"]), step=50)

# --- –¶–µ–Ω—Ç—Ä: IC/BC –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ ---
st.subheader("–ù–∞—á–∞–ª—å–Ω—ã–µ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –∏—Å—Ç–æ—á–Ω–∏–∫")
# --- –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π ---
bc_col1, bc_col2, bc_col3 = st.columns([1,1,2])
with bc_col1:
    st.session_state["left_bc_type"] = st.selectbox(
        "–õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ @ x=x_min",
        options=["Dirichlet", "Neumann"],
        index=["Dirichlet","Neumann"].index(st.session_state["left_bc_type"])
    )
with bc_col2:
    st.session_state["right_bc_type"] = st.selectbox(
        "–ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ @ x=x_max",
        options=["Dirichlet", "Neumann"],
        index=["Dirichlet","Neumann"].index(st.session_state["right_bc_type"])
    )
with bc_col3:
    if st.session_state["left_bc_type"] == "Dirichlet" and st.session_state["right_bc_type"] == "Dirichlet":
        st.caption("Dirichlet: –∑–∞–¥–∞—ë—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ T.  Neumann: –∑–∞–¥–∞—ë—Ç—Å—è –ø–æ—Ç–æ–∫ ‚àÇT/‚àÇx (—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º +x).")
    else:
        st.caption("Neumann –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π ‚àÇT/‚àÇx –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ (—Ç–µ–ø–ª–æ–≤–æ–π –ø–æ—Ç–æ–∫). Dirichlet ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ T.")


col1, col2 = st.columns(2)
with col1:
    st.session_state["ic_expr"]  = st.text_area("IC: T(x, 0) =", value=st.session_state["ic_expr"])
    st.session_state["ict_expr"] = st.text_area("IC (–¥–ª—è 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞): T_t(x, 0) =", value=st.session_state["ict_expr"])
with col2:
    left_label  = f"{st.session_state['left_bc_type']} @ x=x_min"
    right_label = f"{st.session_state['right_bc_type']} @ x=x_max"
    st.session_state["left_bc_expr"]  = st.text_area(left_label,  value=st.session_state["left_bc_expr"])
    st.session_state["right_bc_expr"] = st.text_area(right_label, value=st.session_state["right_bc_expr"])

st.session_state["q_expr"] = st.text_area("–ò—Å—Ç–æ—á–Ω–∏–∫ q(x,t) =", value=st.session_state["q_expr"])
st.caption("–î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ torch: sin, cos, exp, tanh, sqrt, log, abs, pow, min, max; –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã pi, e; –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ x, t.")

# --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è ---
run = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
device = get_device()
st.write(f"**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {device}")

# --- –û–±—É—á–µ–Ω–∏–µ ---
if run:
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    q_fun        = make_callable(st.session_state["q_expr"])        if st.session_state["q_expr"].strip()        != "" else None
    ic_fun       = make_callable(st.session_state["ic_expr"])       if st.session_state["ic_expr"].strip()       != "" else None
    ict_fun      = make_callable(st.session_state["ict_expr"])      if st.session_state["ict_expr"].strip()      != "" else None
    bc_left_fun  = make_callable(st.session_state["left_bc_expr"])  if st.session_state["left_bc_expr"].strip()  != "" else None
    bc_right_fun = make_callable(st.session_state["right_bc_expr"]) if st.session_state["right_bc_expr"].strip() != "" else None

    
    # Per-condition hardening:
    left_kind  = st.session_state["left_bc_type"]
    right_kind = st.session_state["right_bc_type"]
    ic_zero  = _is_zero_expr(st.session_state.get("ic_expr",""))
    ict_zero = _is_zero_expr(st.session_state.get("ict_expr",""))
    bcl_zero = _is_zero_expr(st.session_state.get("left_bc_expr",""))
    bcr_zero = _is_zero_expr(st.session_state.get("right_bc_expr",""))

    # Only enable if user checked the box
    hard_flags = {
        "ic_zero":  bool(st.session_state.get("use_output_transform_zero_only", False) and ic_zero),
        "ict_zero": bool(st.session_state.get("use_output_transform_zero_only", False) and ict_zero),
        "left_zero":  bool(st.session_state.get("use_output_transform_zero_only", False) and bcl_zero),
        "right_zero": bool(st.session_state.get("use_output_transform_zero_only", False) and bcr_zero),
        "left_kind": left_kind,
        "right_kind": right_kind,
    }
    
    _zero_ic   = _is_zero_expr(st.session_state.get("ic_expr",""))
    _zero_ict  = _is_zero_expr(st.session_state.get("ict_expr",""))
    _zero_bcl  = _is_zero_expr(st.session_state.get("left_bc_expr",""))
    _zero_bcr  = _is_zero_expr(st.session_state.get("right_bc_expr",""))
    _is_hyperb = st.session_state["model_name"] in ["Maxwell‚ÄìCattaneo","Green‚ÄìNaghdi II","Green‚ÄìNaghdi III"]
    _all_zero  = (_zero_bcl and _zero_bcr and _zero_ic and (not _is_hyperb or _zero_ict))

    # If user enabled the checkbox and all are zero -> turn on hard-enforcement; else ensure it's off
    if st.session_state.get("use_output_transform_zero_only", False) and _all_zero:
        _hard_zero_mode = True
    else:
        _hard_zero_mode = False
    
    train_cfg = build_train_config(st.session_state)
    train_cfg['hard_enforce'] = hard_flags
    # Per-condition skipping happens in train(); keep weights as configured.
    pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    def _validate_callable(fn, name):
        if fn is None:
            return True, None
        try:
            xt = torch.tensor([[ (float(st.session_state["x_min"])+float(st.session_state["x_max"])) * 0.5 ]], device=device)
            tt = torch.tensor([[ float(st.session_state["t_min"]) ]], device=device)
            _ = fn(xt, tt)
            return True, None
        except Exception as e:
            return False, f"{name}: {e}"

    problems = []
    for fn, nm in [(ic_fun,"IC T(x,0)"), (ict_fun,"IC_t T_t(x,0)"),
                   (bc_left_fun,"BC left"), (bc_right_fun,"BC right"), (q_fun,"q(x,t)")]:
        ok, err = _validate_callable(fn, nm)
        if not ok: problems.append(err)

    hyper = st.session_state["model_name"] in ["Maxwell‚ÄìCattaneo","Green‚ÄìNaghdi II","Green‚ÄìNaghdi III"]
    if hyper and ict_fun is None:
        st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è T_t(x,0). –ù–µ –∑–∞–¥–∞–Ω–æ ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ T_t(x,0)=0.")

    for key in ["epochs","n_f","n_b","n_i"]:
        if int(st.session_state[key]) <= 0:
            problems.append(f"{key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
    if problems:
        st.error("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –≤–≤–æ–¥–µ:")
        for p in problems: st.write(f"‚Ä¢ {p}")
        st.stop()

    # –ú–æ–¥–µ–ª—å –∏ –æ–±—É—á–µ–Ω–∏–µ
    model = PINNModel(in_dim=2, out_dim=1,
                      hidden_layers=int(st.session_state["hidden_layers"]),
                      hidden_units=int(st.session_state["hidden_units"]))
    if any([hard_flags['ic_zero'], hard_flags['ict_zero'], hard_flags['left_zero'], hard_flags['right_zero']]):
        domain_cfg = {"x_min": float(st.session_state["x_min"]), "x_max": float(st.session_state["x_max"]),
                      "t_min": float(st.session_state["t_min"]), "t_max": float(st.session_state["t_max"])}
        bc_types_cfg = {"left": st.session_state["left_bc_type"], "right": st.session_state["right_bc_type"]}
        model = FlexibleTransformedPINN(model, st.session_state["model_name"], domain_cfg, bc_types_cfg,
                                      enforce_ic_zero=hard_flags['ic_zero'],
                                      enforce_ict_zero=hard_flags['ict_zero'],
                                      enforce_left_zero=hard_flags['left_zero'],
                                      enforce_right_zero=hard_flags['right_zero'],
                                      left_kind=left_kind, right_kind=right_kind)


    def ic_call(x, t):    return ic_fun(x, t) if ic_fun else torch.zeros_like(x)
    def ict_call(x, t):   return ict_fun(x, t) if ict_fun else torch.zeros_like(x)
    def left_call(x, t):  return bc_left_fun(x, t) if bc_left_fun else torch.zeros_like(x)
    def right_call(x, t): return bc_right_fun(x, t) if bc_right_fun else torch.zeros_like(x)
    q_call = (lambda x, t: q_fun(x, t)) if q_fun else None

    try:
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ‚Ä¶"):
            model, history, info = train_PINN(model, train_cfg, q_fun=q_call,
                ic_fun=ic_call, ict_fun=ict_call,
                bc_left=left_call, bc_right=right_call
            , device=_selected_device)
        st.success("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ")
        if train_cfg["checkpoint"]["enable"]:
            if info.get("last_path"):
                st.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫–ø–æ–∏–Ω—Ç: **{info['last_path']}**.")
            else:
                st.info("–ß–µ–∫–ø–æ–∏–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –≤ —Ö–æ–¥–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ.")

        # –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ session_state (–Ω–∞ CPU), —á—Ç–æ–±—ã –ø–æ–ª–∑—É–Ω–∫–∏ –Ω–µ ¬´–æ–±–Ω—É–ª—è–ª–∏¬ª
        model_cpu = model.to("cpu").eval()
        st.session_state["trained_model"] = model_cpu
        st.session_state["has_model"] = True

    except Exception as e:
        st.error("–í–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:")
        st.exception(e)
        st.stop()

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ ---
st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)")
if not st.session_state.get("has_model", False):
    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ù–∞–∂–º–∏—Ç–µ ¬´üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ¬ª.")
else:
    # –±–µ—Ä—ë–º –º–æ–¥–µ–ª—å –∏–∑ session_state –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    model = st.session_state["trained_model"].to(get_device()).eval()

    nx = st.slider("nx (—Å–µ—Ç–∫–∞ –ø–æ x)", min_value=51, max_value=401, value=201, step=10)
    nt = st.slider("nt (—Å–µ—Ç–∫–∞ –ø–æ t)", min_value=51, max_value=401, value=201, step=10)

    xs = torch.linspace(float(st.session_state["x_min"]), float(st.session_state["x_max"]), steps=nx, device=get_device()).view(-1,1)
    ts = torch.linspace(float(st.session_state["t_min"]), float(st.session_state["t_max"]), steps=nt, device=get_device()).view(-1,1)
    X = xs.repeat(1, nt).reshape(-1,1)
    Tt = ts.t().repeat(nx, 1).reshape(-1,1)

    with torch.no_grad():
        U = model(X, Tt)

    U2d = U.reshape(xs.shape[0], ts.shape[0]).detach().cpu().numpy()
    Xv = xs.detach().cpu().numpy().ravel()
    Tv = ts.detach().cpu().numpy().ravel()

    fig = go.Figure(data=[go.Surface(x=Tv, y=Xv, z=U2d, colorbar=dict(title="T"),
                                     contours={"z": {"show": True, "usecolormap": True}})])
    fig.update_layout(scene=dict(xaxis_title="t", yaxis_title="x", zaxis_title="T"), height=600)
    st.plotly_chart(fig, use_container_width=True)

    # –ü—Ä–æ—Ñ–∏–ª—å T(x) –ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º t-–∏–Ω–¥–µ–∫—Å–µ
    t_idx = st.slider("–ü—Ä–æ—Ñ–∏–ª—å T(x) –ø—Ä–∏ t-–∏–Ω–¥–µ–∫—Å–µ", min_value=0, max_value=ts.shape[0]-1, value=0)
    t_sel = float(Tv[t_idx])
    st.caption(f"–í—ã–±—Ä–∞–Ω t ‚âà {t_sel:.4f}")
    st.line_chart(pd.DataFrame({"x": Xv, "T(x, t_sel)": U2d[:, t_idx]}).set_index("x"))

    # –ü—Ä–æ—Ñ–∏–ª—å T(t) –ø—Ä–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º x-–∏–Ω–¥–µ–∫—Å–µ
    x_idx = st.slider("–ü—Ä–æ—Ñ–∏–ª—å T(t) –ø—Ä–∏ x-–∏–Ω–¥–µ–∫—Å–µ", min_value=0, max_value=xs.shape[0]-1, value=int(xs.shape[0]//2))
    x_sel = float(Xv[x_idx])
    st.caption(f"–í—ã–±—Ä–∞–Ω x ‚âà {x_sel:.4f}")
    st.line_chart(pd.DataFrame({"t": Tv, "T(t, x_sel)": U2d[x_idx, :]}).set_index("t"))
    # ===== –ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (FDM) =====
    st.subheader("–ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (FDM)")

# –ú–µ—Ç–æ–¥ (—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º key) –∏ –º–µ—Ç—Ä–∏–∫–∞ –æ—à–∏–±–∫–∏
method_label = st.selectbox(
    "–ß–∏—Å–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (FDM)",
    ["Crank‚ÄìNicolson (–Ω–µ—è–≤–Ω–∞—è, 2-–π –ø–æ—Ä—è–¥–æ–∫)", "Backward Euler (–Ω–µ—è–≤–Ω–∞—è, 1-–π –ø–æ—Ä—è–¥–æ–∫)", "FTCS (—è–≤–Ω–∞—è, –±—ã—Å—Ç—Ä–∞—è)"],
    index=0, key="fdm_method_select"
)
_map = {
    "FTCS (—è–≤–Ω–∞—è, –±—ã—Å—Ç—Ä–∞—è)": "ftcs",
    "Backward Euler (–Ω–µ—è–≤–Ω–∞—è, 1-–π –ø–æ—Ä—è–¥–æ–∫)": "be",
    "Crank‚ÄìNicolson (–Ω–µ—è–≤–Ω–∞—è, 2-–π –ø–æ—Ä—è–¥–æ–∫)": "cn"
}
fdm_method = _map[method_label]

err_label = st.selectbox(
    "–ú–µ—Ç—Ä–∏–∫–∞ –æ—à–∏–±–∫–∏",
    ["MSE (–∞–±—Å.)", "RMSE (–∞–±—Å.)", "MAE (–∞–±—Å.)", "RelMSE (%)", "RelMAE (%)", "MaxRel (%)"],
    index=0, key="fdm_error_metric_select"
)

def _err_scalar(pred, true, kind):
    import numpy as np
    pred = np.asarray(pred); true = np.asarray(true)
    diff = pred - true
    if kind == "MSE (–∞–±—Å.)":  return float(np.mean(diff**2))
    if kind == "RMSE (–∞–±—Å.)": return float(np.sqrt(np.mean(diff**2)))
    if kind == "MAE (–∞–±—Å.)":  return float(np.mean(np.abs(diff)))
    if kind == "RelMSE (%)":
        denom = float(np.mean(true**2)) + 1e-12
        return float(100.0*np.mean(diff**2)/denom)
    if kind == "RelMAE (%)":
        denom = float(np.mean(np.abs(true))) + 1e-12
        return float(100.0*np.mean(np.abs(diff))/denom)
    if kind == "MaxRel (%)":
        denom = np.maximum(np.abs(true), 1e-12)
        return float(100.0*np.max(np.abs(diff)/denom))
    return float(np.mean(diff**2))

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —á–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (FDM) –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å PINN", key="btn_fdm_compare"):
    q_fun_num        = make_callable(st.session_state["q_expr"])        if st.session_state["q_expr"].strip()        != "" else None
    ic_fun_num       = make_callable(st.session_state["ic_expr"])       if st.session_state["ic_expr"].strip()       != "" else None
    ict_fun_num      = make_callable(st.session_state["ict_expr"])      if st.session_state["ict_expr"].strip()      != "" else None
    bc_left_fun_num  = make_callable(st.session_state["left_bc_expr"])  if st.session_state["left_bc_expr"].strip()  != "" else None
    bc_right_fun_num = make_callable(st.session_state["right_bc_expr"]) if st.session_state["right_bc_expr"].strip() != "" else None

    cfg = {
        "model_name": st.session_state["model_name"],
        "params": {"kappa": float(st.session_state["kappa"]),
                   "tau_R": float(st.session_state["tau_R"]),
                   "kappa_tilde": float(st.session_state["kappa_tilde"])},
        "domain": {"x_min": float(st.session_state["x_min"]),
                   "x_max": float(st.session_state["x_max"]),
                   "t_min": float(st.session_state["t_min"]),
                   "t_max": float(st.session_state["t_max"])},
        "bc_types": {"left": st.session_state["left_bc_type"], "right": st.session_state["right_bc_type"]},
    }

    with st.spinner("–°—á–∏—Ç–∞–µ–º —á–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (FDM)‚Ä¶"):
        U_num, info_num = solve_numeric(
            cfg["model_name"], cfg["params"], cfg["domain"], cfg["bc_types"],
            ic_fun_num, ict_fun_num, bc_left_fun_num, bc_right_fun_num, q_fun_num,
            nx, nt, device="cpu", method=fdm_method
        )

    st.session_state["fdm"] = {"U_num": U_num, "info": info_num, "method": fdm_method, "nx": int(nx), "nt": int(nt)}
    st.success("–ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è FDM –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
if "fdm" in st.session_state:
    import numpy as np
    U_num = np.array(st.session_state["fdm"]["U_num"])
    info_num = st.session_state["fdm"]["info"]
    if info_num.get("stable_hint"): st.warning(info_num["stable_hint"])
    if U_num.shape != (len(Xv), len(Tv)):
        st.warning("–†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ç–æ–∫ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç FDM ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ FDM –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ nx/nt.")

    figN = go.Figure(data=[go.Surface(x=Tv, y=Xv, z=U_num, colorbar=dict(title="T_num"),
                                      contours={"z":{"show":True,"usecolormap":True}})])
    figN.update_layout(scene=dict(xaxis_title="t", yaxis_title="x", zaxis_title="T_num"), height=600, title="–ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (FDM)")
    st.plotly_chart(figN, use_container_width=True)

    if st.session_state.get("has_model", False) and U_num.shape == (len(Xv), len(Tv)):
        err_scalar = _err_scalar(U2d, U_num, err_label)
        st.metric(f"–û—à–∏–±–∫–∞ PINN vs FDM ({err_label})", f"{err_scalar:.3e}")

    # –°—Ä–µ–∑ T(x) –ø—Ä–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º t (—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º key)
    t_idx_fdm = st.slider("–°—Ä–µ–∑: T(x) –ø—Ä–∏ t-–∏–Ω–¥–µ–∫—Å–µ (FDM-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)",
                          min_value=0, max_value=len(Tv)-1, value=min(len(Tv)-1, 0), key="fdm_slice_t_idx")
    t_sel = float(Tv[t_idx_fdm]); st.caption(f"–í—ã–±—Ä–∞–Ω t ‚âà {t_sel:.4f}")
    figC = go.Figure()
    if st.session_state.get("has_model", False) and U_num.shape == (len(Xv), len(Tv)):
        figC.add_trace(go.Scatter(x=Xv, y=U2d[:, t_idx_fdm], mode="lines", name="PINN"))
    figC.add_trace(go.Scatter(x=Xv, y=U_num[:, t_idx_fdm], mode="lines", name="FDM", line=dict(dash="dash")))
    figC.update_layout(xaxis_title="x", yaxis_title="T(x)", height=400, title=f"–°—Ä–µ–∑ –ø–æ x –ø—Ä–∏ t‚âà{t_sel:.4f}")
    st.plotly_chart(figC, use_container_width=True)
    if st.session_state.get("has_model", False) and U_num.shape == (len(Xv), len(Tv)):
        err_slice_x = _err_scalar(U2d[:, t_idx_fdm], U_num[:, t_idx_fdm], err_label)
        st.metric(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ä–µ–∑–µ T(x) –ø—Ä–∏ t‚âà{t_sel:.4f} ({err_label})", f"{err_slice_x:.3e}")

    # –°—Ä–µ–∑ T(t) –ø—Ä–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º x (—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º key)
    x_idx_fdm = st.slider("–°—Ä–µ–∑: T(t) –ø—Ä–∏ x-–∏–Ω–¥–µ–∫—Å–µ (FDM-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)",
                          min_value=0, max_value=len(Xv)-1, value=int(len(Xv)//2), key="fdm_slice_x_idx")
    x_sel = float(Xv[x_idx_fdm]); st.caption(f"–í—ã–±—Ä–∞–Ω x ‚âà {x_sel:.4f}")
    figCt = go.Figure()
    if st.session_state.get("has_model", False) and U_num.shape == (len(Xv), len(Tv)):
        figCt.add_trace(go.Scatter(x=Tv, y=U2d[x_idx_fdm, :], mode="lines", name="PINN"))
    figCt.add_trace(go.Scatter(x=Tv, y=U_num[x_idx_fdm, :], mode="lines", name="FDM", line=dict(dash="dash")))
    figCt.update_layout(xaxis_title="t", yaxis_title="T(t)", height=400, title=f"–°—Ä–µ–∑ –ø–æ t –ø—Ä–∏ x‚âà{x_sel:.4f}")
    st.plotly_chart(figCt, use_container_width=True)
    if st.session_state.get("has_model", False) and U_num.shape == (len(Xv), len(Tv)):
        err_slice_t = _err_scalar(U2d[x_idx_fdm, :], U_num[x_idx_fdm, :], err_label)
        st.metric(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ä–µ–∑–µ T(t) –ø—Ä–∏ x‚âà{x_sel:.4f} ({err_label})", f"{err_slice_t:.3e}")
# –≠–∫—Å–ø–æ—Ä—Ç CSV –≤—Å–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    rows = []
    for i, x in enumerate(Xv):
        for j, t in enumerate(Tv):
            rows.append((x, t, U2d[i, j]))
    df = pd.DataFrame(rows, columns=["x", "t", "T"])
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å CSV", data=df.to_csv(index=False).encode("utf-8"),
                       file_name="pinn_T_result.csv", mime="text/csv")

render_help()











